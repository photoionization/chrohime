import("//tools/grit/grit_rule.gni")
import("//tools/grit/repack.gni")

component("chrohime_no_content") {
  sources = [
    "api/background.cc",
    "api/background.h",
    "api/badge.cc",
    "api/badge.h",
    "api/border.cc",
    "api/border.h",
    "api/button.cc",
    "api/button.h",
    "api/checkbox.cc",
    "api/checkbox.h",
    "api/combobox.cc",
    "api/combobox.h",
    "api/combobox_model.cc",
    "api/combobox_model.h",
    "api/color_id.h",
    "api/label.cc",
    "api/label.h",
    "api/label_button.cc",
    "api/label_button.h",
    "api/link.cc",
    "api/link.h",
    "api/material_button.cc",
    "api/material_button.h",
    "api/object.cc",
    "api/object.h",
    "api/picker.cc",
    "api/picker.h",
    "api/progress_bar.cc",
    "api/progress_bar.h",
    "api/radio_button.cc",
    "api/radio_button.h",
    "api/root_view.cc",
    "api/root_view.h",
    "api/scroll_view.cc",
    "api/scroll_view.h",
    "api/signal.h",
    "api/simple_combobox_model.cc",
    "api/simple_combobox_model.h",
    "api/simple_table_model.cc",
    "api/simple_table_model.h",
    "api/slider.cc",
    "api/slider.h",
    "api/state.cc",
    "api/state.h",
    "api/tab_view.cc",
    "api/tab_view.h",
    "api/table_model.cc",
    "api/table_model.h",
    "api/table_view.cc",
    "api/table_view.h",
    "api/textarea.cc",
    "api/textarea.h",
    "api/textfield.cc",
    "api/textfield.h",
    "api/toggle_button.cc",
    "api/toggle_button.h",
    "api/view.cc",
    "api/view.h",
    "api/window.cc",
    "api/window.h",
    "api/yoga_layout_manager.cc",
    "api/yoga_layout_manager.h",
    "api/yoga_util.cc",
    "api/yoga_util.h",
  ]

  configs += [ ":chrohime_internal_config" ]

  deps = [
    ":yoga",
    "//ui/views",
  ]
  public_deps = [
    "//base",
    "//ui/base",
  ]
}

source_set("chrohime_lifetime") {
  sources = [
    "api/lifetime.cc",
    "api/lifetime.h",
  ]
  if (is_mac) {
    sources += [
      "api/lifetime/chrohime_app_delegate.h",
      "api/lifetime/chrohime_app_delegate.mm",
      "api/lifetime/lifetime_mac.mm",
      "api/lifetime/main_menu_builder.h",
      "api/lifetime/main_menu_builder.mm",
    ]
    frameworks = [
      "AppKit.framework",
    ]
  }
  configs += [ ":chrohime_internal_config" ]
  deps = [ ":chrohime_no_content" ]
}

component("chrohime_no_content_with_lifetime") {
  # TODO(zcbenz): The base/test:test_support is for tests, we need our own
  # task environment to get rid of testonly.
  testonly = true

  sources = [
    "api/lifetime/lifetime_no_content.cc",
  ]

  configs += [ ":chrohime_internal_config" ]

  public_deps = [
    ":chrohime_lifetime",
    ":chrohime_no_content",
    "//skia",
  ]
  deps = [
    ":chrohime_pak",
    "//base/test:test_support",
    "//ui/compositor:test_support",
    "//ui/gl",
    "//ui/gl/init",
    "//ui/views:test_support",
  ]
  if (is_linux) {
    deps += [ "//ui/linux:linux_ui_factory" ]
  }
  if (use_aura) {
    deps += [ "//ui/aura" ]
  }
}

component("chrohime_with_content_with_lifetime") {
  # TODO(zcbenz): The views_content_client is for tests, we need our own
  # content clients to get rid of testonly.
  testonly = true

  sources = [
    "api/lifetime/lifetime_with_content.cc",
    "api/web_view.cc",
    "api/web_view.h",
  ]

  configs += [ ":chrohime_internal_config" ]

  public_deps = [
    ":chrohime_lifetime",
    ":chrohime_no_content",
    "//url",
  ]
  deps = [
    "//chrohime/content",
    "//content:sandbox_helper_win",
    "//sandbox",
    "//ui/views/controls/webview",
  ]
  if (is_mac) {
    deps += [ "//sandbox/mac:seatbelt" ]
  }
}

config("chrohime_internal_config") {
  defines = [ "CHROHIME_IMPLEMENTATION" ]
}

repack("chrohime_pak") {
  output = "$root_out_dir/chrohime.pak"
  sources = [
    "$root_gen_dir/ui/resources/ui_resources_100_percent.pak",
    "$root_gen_dir/ui/strings/ax_strings_en-US.pak",
    "$root_gen_dir/ui/strings/ui_strings_en-US.pak",
    "$root_gen_dir/ui/views/resources/views_resources_100_percent.pak",
  ]
  deps = [
    "//ui/resources",
    "//ui/strings",
    "//ui/views/resources",
  ]
}

source_set("yoga") {
  public_configs = [ ":yoga_config" ]

  sources = [
    "third_party/yoga/yoga/YGNodeLayout.h",
    "third_party/yoga/yoga/YGNodeStyle.cpp",
    "third_party/yoga/yoga/YGEnums.h",
    "third_party/yoga/yoga/YGNode.h",
    "third_party/yoga/yoga/YGMacros.h",
    "third_party/yoga/yoga/config/Config.h",
    "third_party/yoga/yoga/config/Config.cpp",
    "third_party/yoga/yoga/Yoga.h",
    "third_party/yoga/yoga/enums/Align.h",
    "third_party/yoga/yoga/enums/Edge.h",
    "third_party/yoga/yoga/enums/Gutter.h",
    "third_party/yoga/yoga/enums/Justify.h",
    "third_party/yoga/yoga/enums/ExperimentalFeature.h",
    "third_party/yoga/yoga/enums/Unit.h",
    "third_party/yoga/yoga/enums/FlexDirection.h",
    "third_party/yoga/yoga/enums/Errata.h",
    "third_party/yoga/yoga/enums/Direction.h",
    "third_party/yoga/yoga/enums/MeasureMode.h",
    "third_party/yoga/yoga/enums/Display.h",
    "third_party/yoga/yoga/enums/LogLevel.h",
    "third_party/yoga/yoga/enums/NodeType.h",
    "third_party/yoga/yoga/enums/YogaEnums.h",
    "third_party/yoga/yoga/enums/PositionType.h",
    "third_party/yoga/yoga/enums/Overflow.h",
    "third_party/yoga/yoga/enums/PrintOptions.h",
    "third_party/yoga/yoga/enums/Dimension.h",
    "third_party/yoga/yoga/enums/Wrap.h",
    "third_party/yoga/yoga/YGPixelGrid.cpp",
    "third_party/yoga/yoga/style/CompactValue.h",
    "third_party/yoga/yoga/style/Style.h",
    "third_party/yoga/yoga/style/StyleLength.h",
    "third_party/yoga/yoga/algorithm/Baseline.h",
    "third_party/yoga/yoga/algorithm/AbsoluteLayout.cpp",
    "third_party/yoga/yoga/algorithm/FlexLine.h",
    "third_party/yoga/yoga/algorithm/BoundAxis.h",
    "third_party/yoga/yoga/algorithm/SizingMode.h",
    "third_party/yoga/yoga/algorithm/Align.h",
    "third_party/yoga/yoga/algorithm/CalculateLayout.cpp",
    "third_party/yoga/yoga/algorithm/Cache.h",
    "third_party/yoga/yoga/algorithm/FlexDirection.h",
    "third_party/yoga/yoga/algorithm/TrailingPosition.h",
    "third_party/yoga/yoga/algorithm/PixelGrid.cpp",
    "third_party/yoga/yoga/algorithm/CalculateLayout.h",
    "third_party/yoga/yoga/algorithm/Cache.cpp",
    "third_party/yoga/yoga/algorithm/Baseline.cpp",
    "third_party/yoga/yoga/algorithm/FlexLine.cpp",
    "third_party/yoga/yoga/algorithm/PixelGrid.h",
    "third_party/yoga/yoga/algorithm/AbsoluteLayout.h",
    "third_party/yoga/yoga/numeric/Comparison.h",
    "third_party/yoga/yoga/numeric/FloatOptional.h",
    "third_party/yoga/yoga/YGEnums.cpp",
    "third_party/yoga/yoga/YGValue.cpp",
    "third_party/yoga/yoga/YGNodeStyle.h",
    "third_party/yoga/yoga/YGConfig.h",
    "third_party/yoga/yoga/YGPixelGrid.h",
    "third_party/yoga/yoga/YGConfig.cpp",
    "third_party/yoga/yoga/YGNode.cpp",
    "third_party/yoga/yoga/node/LayoutResults.cpp",
    "third_party/yoga/yoga/node/LayoutResults.h",
    "third_party/yoga/yoga/node/Node.cpp",
    "third_party/yoga/yoga/node/Node.h",
    "third_party/yoga/yoga/node/CachedMeasurement.h",
    "third_party/yoga/yoga/YGValue.h",
    "third_party/yoga/yoga/event/event.h",
    "third_party/yoga/yoga/event/event.cpp",
    "third_party/yoga/yoga/YGNodeLayout.cpp",
    "third_party/yoga/yoga/debug/Log.cpp",
    "third_party/yoga/yoga/debug/AssertFatal.cpp",
    "third_party/yoga/yoga/debug/NodeToString.cpp",
    "third_party/yoga/yoga/debug/AssertFatal.h",
    "third_party/yoga/yoga/debug/Log.h",
    "third_party/yoga/yoga/debug/NodeToString.h",
  ]
}

config("yoga_config") {
  include_dirs = [ "third_party/yoga" ]
}

group("test_all") {
  testonly = true
  deps = [
    "test:chrohime_test",
    "test:chrohime_gallery",
  ]
}
