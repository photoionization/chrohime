name: View
type: refcounted
inherit: Object
description: A View is a rectangle within the View hierarchy.

constructors:
  - name: Create
    description: Create a new View.

methods:
  - name: SetVisible
    description: Show/Hide the view.
    args:
      - name: visible
        type: bool

  - name: IsVisible
    description: Return whether the view is visible.
    const: true
    returnType: bool

  - name: IsDrawn
    description: Return true if this view is drawn on screen.
    const: true
    returnType: bool

  - name: SetEnabled
    description: Set whether the view is enabled.
    args:
      - name: enabled
        type: bool

  - name: IsEnabled
    description: Return whether the view is enabled.
    const: true
    returnType: bool

  - name: Focus
    description: Request keyboard focus.

  - name: HasFocus
    description: Return whether this view currently has the focus.
    const: true
    returnType: bool

  - name: SetFocusBehavior
    description: Set whether this view can receive keyboard focus.
    args:
      - name: behavior
        type: View::FocusBehavior

  - name: GetFocusBehavior
    description: Return whether this view can receive keyboard focus.
    const: true
    returnType: View::FocusBehavior

  - name: SetBounds
    description: |
      Change the bounds of view directly.

      This method should only be used when using custom layout engines, normal
      users should use `SetStyle` instead.
    args:
      - name: bounds
        type: gfx::Rect

  - name: GetBounds
    description: Return the bounds of the view in its parent's coordinates.
    const: true
    returnType: gfx::Rect

  - name: GetBoundsInScreen
    description: Return the bounds of the View in screen coordinate system.
    const: true
    returnType: gfx::Rect

  - name: SetPreferredSize
    description: Set or unset the size that this View will request during layout.
    args:
      - name: size
        type: optional<gfx::Size>

  - name: GetPreferredSize
    description: |
      Return the size the view would like to be under the current bounds.

      If the View is never laid out before, assume it to be laid out in an
      unbounded space.
    const: true
    returnType: gfx::Size

  - name: SetStyle
    description: &setstyle |
      Change the styles of the view.

      Note that calling this method does not changes the bounds immediately,
      the bounds will change when the view hierarchy re-calculates the layout,
      such as when resizing window or when adding/removing child views. To make
      the new styles apply immediately you can call `Layout` method.
    args:
      - name: name
        type: string
      - name: value
        type: string

  - name: SetStyleNumber
    description: *setstyle
    args:
      - name: name
        type: string
      - name: value
        type: float

  - name: Layout
    description: Re-calculate the layout in view hierarchy.

  - name: SchedulePaint
    description: Mark all of the view's bounds as dirty (needing repaint).

  - name: SchedulePaintInRect
    description: Mark view's `bounds` as dirty.
    args:
      - name: bounds
        type: gfx::Rect

  - name: SetBackground
    description: Set the `background` of the view.
    args:
      - name: background
        type: Background

  - name: SetBorder
    description: |
      Set the `border` of the view.

      Note that it is also possible to set border via the `SetStyle` API, but
      it only serves as layout property rather than actually drawin a border,
      while the `SetBorder` API actually draws the border.

      The two types of borders do not know each other and setting both might
      cause weird visual effects, this will change in future and please be
      prepared for it.
    args:
      - name: border
        type: Border

  - name: AddChildView
    description: Append a child `view` to this view.
    args:
      - name: view
        type: View

  - name: AddChildViewAt
    description: Add a child `view` to this view at `index`.
    args:
      - name: view
        type: View
      - name: index
        type: size_t

  - name: RemoveChildView
    description: Remove a child `view` from this view.
    args:
      - name: view
        type: View

  - name: ChildCount
    description: Return the count of children in this view.
    const: true
    returnType: size_t

  - name: ChildAt
    description: Return the child View at `index`.
    const: true
    args:
      - name: index
        type: size_t
    returnType: View

  - name: SetAccessibleName
    description: |
      Set the accessible name.

      The value of the accessible name is a localized, end-user-consumable
      string which may be derived from visible information (e.g. the text on a
      button) or invisible information (e.g. the alternative text describing an
      icon). In the case of focusable objects, the name will be presented by
      the screen reader when that object gains focus and is critical to
      understanding the purpose of that object non-visually.
    args:
      - name: name
        type: string

  - name: GetAccessibleName
    description: Get the accessible name.
    const: true
    returnType: const string ref

  - name: SetId
    description: |
      Get the ID for this view.

      ID should be unique within the subtree that you intend to search for it.
      0 is the default ID for views.
    args:
      - name: id
        type: int

  - name: GetId
    description: Get the ID of this view.
    const: true
    returnType: int

  - name: GetViewById
    description: |
      Recursively descend the view tree starting at this view, and return
      the first child that it encounters that has the given ID.

      Return NULL if no matching child view is found.
    args:
      - name: id
        type: int
    returnType: View

  - name: SetGroup
    description: |
      Set the `group` id of this view.

      Some view subclasses use this id to find other views of the same group.
      For example radio button uses this information to find other radio
      buttons.
    args:
      - name: group
        type: int

  - name: GetGroup
    description: Get the group id of this view.
    const: true
    returnType: int

  - name: GetViewsInGroup
    description: Get all the available views which belong to the `group`.
    args:
      - name: group
        type: int
    returnType: vector<View>

events:
  - name: onDraw
    description: Emitted when the drawing of view is done.
    args:
      - name: view
        type: View
      - name: painter
        type: Painter

  - name: onWillDraw
    description: |
      Emitted when the drawing of view is going to start.

      Returning true will prevent the default paint routine of view.
    args:
      - name: view
        type: View
      - name: painter
        type: Painter
    returnType: bool

  - name: onMouseDown
    description: Emitted when pressing mouse buttons.
    args:
      - name: view
        type: View
      - name: event
        type: const MouseEvent
    returnType: bool

  - name: onMouseUp
    description: Emitted when releasing mouse buttons.
    args:
      - name: view
        type: View
      - name: event
        type: const MouseEvent
    returnType: bool

  - name: onMouseMove
    description: Emitted when user moves mouse in the view.
    args:
      - name: view
        type: View
      - name: event
        type: const MouseEvent
    returnType: bool

  - name: onMouseEnter
    description: Emitted when mouse enters the view.
    args:
      - name: view
        type: View
      - name: event
        type: const MouseEvent
    returnType: bool

  - name: onMouseLeave
    description: Emitted when mouse leaves the view.
    args:
      - name: view
        type: View
      - name: event
        type: const MouseEvent
    returnType: bool

  - name: onKeyDown
    description: Emitted when pressing keyboard.
    args:
      - name: view
        type: View
      - name: event
        type: const KeyEvent
    returnType: bool

  - name: onKeyUp
    description: Emitted when releasing keyboard.
    args:
      - name: view
        type: View
      - name: event
        type: const KeyEvent
    returnType: bool
