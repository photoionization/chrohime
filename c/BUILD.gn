shared_library("chrohime_shared_c_lib") {
  testonly = true

  sources = [
    "chrohime.h",
    "chrohime_c_impl.cc",
    "chrohime_c_impl.inc",
    "skia.h",
  ]
  data = [
    "$target_gen_dir/generated_impls.cc",
    "$target_gen_dir/generated_impls.h",
  ]
  defines = [ "CHROHIME_C_IMPLEMENTATION" ]

  deps = [ ":chrohime_generate_c_impls" ]

  # views_no_content is not working on macOS for now, also views_with_content
  # can not work on Windows due to sandbox issue, which requires patch:
  # https://github.com/chromiumembedded/cef/blob/master/patch/patches/win_sandbox_3210.patch
  if (is_mac) {
    deps += [ "//chrohime:chrohime_with_content_with_lifetime" ]
  } else {
    deps += [ "//chrohime:chrohime_no_content_with_lifetime" ]
  }

  if (is_apple) {
    # Default optimization on apple adds "-dead_strip" to ldflags, which would
    # strip exported symbols.
    # There is almost no performance penalty since we are only removing
    # optimization on the c_impl.cc.
    configs -= [ "//build/config/compiler:default_optimization" ]
  }
}

# Generate a public header to be shipped.
action("chrohime_public_c_header") {
  deps = [ "//chrohime/docs:apis_json" ]
  inputs = [ "$root_out_dir/chrohime_apis.json" ]
  outputs = [ "$root_out_dir/chrohime.h" ]
  script = "generate_c_impls.py"
  args = [ "--public-header", "--apis-json" ] + rebase_path(inputs) +
         [ "--output-dir", rebase_path(root_out_dir)]
}

# Generate implementations of C APIs.
action("chrohime_generate_c_impls") {
  deps = [ "//chrohime/docs:apis_json" ]
  inputs = [ "$root_out_dir/chrohime_apis_barebone.json" ]
  outputs = [
    "$target_gen_dir/generated_impls.cc",
    "$target_gen_dir/generated_impls.h",
  ]
  script = "generate_c_impls.py"
  args = [ "--apis-json" ] + rebase_path(inputs) +
         [ "--output-dir", rebase_path(target_gen_dir)]
}
