chrohime_dylib_files = [
  "chrohime.h",
  "chrohime_c_impl.cc",
  "chrohime_c_impl.inc",
  "skia.h",
]

# A shared library exposing chrohime C APIs, used for building independent apps.
shared_library("chrohime_dylib") {
  testonly = true
  output_name = "libchrohime"
  sources = chrohime_dylib_files
  configs += [ ":chrohime_dylib_internal_config" ]
  deps = [
    ":chrohime_generate_c_impls",
    "//chrohime:chrohime_no_content_with_lifetime",
  ]

  if (is_apple) {
    # Default optimization on apple adds "-dead_strip" to ldflags, which would
    # strip exported symbols.
    # There is almost no performance penalty since we are only removing
    # optimization on the c_impl.cc.
    configs -= [ "//build/config/compiler:default_optimization" ]
  }
}

# Same with chrohime_dylib but also includes content APIs.
shared_library("chrohime_with_content_dylib") {
  testonly = true
  output_name = "libchrohime_with_content"
  sources = chrohime_dylib_files
  configs += [ ":chrohime_dylib_internal_config" ]
  deps = [
    ":chrohime_generate_c_impls",
    "//chrohime:chrohime_with_content_with_lifetime",
  ]

  if (is_apple) {
    configs -= [ "//build/config/compiler:default_optimization" ]
  }

  public_configs = [ ":chrohime_with_content_dylib_config" ]
}

config("chrohime_dylib_internal_config") {
  defines = [ "CHROHIME_C_IMPLEMENTATION" ]
}

config("chrohime_with_content_dylib_config") {
  defines = [ "CHROHIME_WITH_CONTENT" ]
}

# Generate a public header to be shipped.
action("chrohime_public_c_header") {
  deps = [ "//chrohime/docs:apis_json" ]
  inputs = [ "$root_out_dir/chrohime_apis.json" ]
  outputs = [ "$root_out_dir/chrohime.h" ]
  script = "generate_c_impls.py"
  args = [ "--public-header", "--apis-json" ] + rebase_path(inputs) +
         [ "--output-dir", rebase_path(root_out_dir)]
}

# Generate implementations of C APIs.
action("chrohime_generate_c_impls") {
  deps = [ "//chrohime/docs:apis_json" ]
  inputs = [ "$root_out_dir/chrohime_apis_barebone.json" ]
  outputs = [
    "$target_gen_dir/generated_impls.cc",
    "$target_gen_dir/generated_impls.h",
  ]
  script = "generate_c_impls.py"
  args = [ "--apis-json" ] + rebase_path(inputs) +
         [ "--output-dir", rebase_path(target_gen_dir)]
}
